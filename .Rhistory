scoreforq3df <<- df[df$position1 == 3,]
scoreforq4df <<- df[df$position1 == 4,]
View(scoreforq1df)
max.x.q1 <- max(scoreforq1df$x)
min.x.q1 <- min(scoreforq1df$x)
max.y.q1 <- max(scoreforq1df$y)
min.y.q1 <- min(scoreforq1df$y)
h1 <- length(scoreforq1df[,1])
for (i in 1:h1) {
scoreforq1df[i,5] <<- (((scoreforq1df[i,3] - min.x.q1) / (max.x.q1 - min.x.q1)) * 2.5 ) + 7.5
scoreforq1df[i,6] <<- (((scoreforq1df[i,4] - min.y.q1) / (max.y.q1 - min.y.q1)) * 2.5 ) + 7.5
scoreforq1df[i,7] <<- (scoreforq1df[i,5] + scoreforq1df[i,6]) / 2
}
for (i in 1:h1) {
scoreforq1df[i,5] <<- (((scoreforq1df[i,3] - min.x.q1) / (max.x.q1 - min.x.q1)) * 2.5 ) + 7.5
scoreforq1df[i,6] <<- (((scoreforq1df[i,4] - min.y.q1) / (max.y.q1 - min.y.q1)) * 2.5 ) + 7.5
scoreforq1df[i,7] <<- (scoreforq1df[i,5] + scoreforq1df[i,6]) / 2
}
scoreforq1df <<- df[df$position1 == 1,]
scoreforq2df <<- df[df$position1 == 2,]
scoreforq3df <<- df[df$position1 == 3,]
scoreforq4df <<- df[df$position1 == 4,]
max.x.q1 <- max(scoreforq1df$x)
min.x.q1 <- min(scoreforq1df$x)
max.y.q1 <- max(scoreforq1df$y)
min.y.q1 <- min(scoreforq1df$y)
h1 <- length(scoreforq1df[,1])
for (i in 1:h1) {
scoreforq1df[i,5] <<- (((scoreforq1df[i,3] - min.x.q1) / (max.x.q1 - min.x.q1)) * 2.5 ) + 7.5
scoreforq1df[i,6] <<- (((scoreforq1df[i,4] - min.y.q1) / (max.y.q1 - min.y.q1)) * 2.5 ) + 7.5
scoreforq1df[i,7] <<- (scoreforq1df[i,5] + scoreforq1df[i,6]) / 2
}
for (i in 1:h1) {
scoreforq1df[i,5] <- (((scoreforq1df[i,3] - min.x.q1) / (max.x.q1 - min.x.q1)) * 2.5 ) + 7.5
scoreforq1df[i,6] <- (((scoreforq1df[i,4] - min.y.q1) / (max.y.q1 - min.y.q1)) * 2.5 ) + 7.5
scoreforq1df[i,7] <- (scoreforq1df[i,5] + scoreforq1df[i,6]) / 2
}
max.x.q2 <- max(scoreforq2df$x)
min.x.q2 <- min(scoreforq2df$x)
max.x.q2 <- max(scoreforq2df$x)
min.x.q2 <- min(scoreforq2df$x)
max.y.q2 <- max(scoreforq2df$y)
min.y.q2 <- min(scoreforq2df$y)
h2 <- length(scoreforq2df[,1])
for (i in 1:h2) {
scoreforq2df[i,5] <<- (((scoreforq2df[i,3] - min.x.q2) / (max.x.q2 - min.x.q2)) * 2.5 ) + 5
scoreforq2df[i,6] <<- (((scoreforq2df[i,4] - min.y.q2) / (max.y.q2 - min.y.q2)) * 2.5 ) + 5
scoreforq2df[i,7] <<- (scoreforq2df[i,5] + scoreforq2df[i,6]) / 2
}
for (i in 1:h2) {
scoreforq2df[i,5] <- (((scoreforq2df[i,3] - min.x.q2) / (max.x.q2 - min.x.q2)) * 2.5 ) + 5
scoreforq2df[i,6] <- (((scoreforq2df[i,4] - min.y.q2) / (max.y.q2 - min.y.q2)) * 2.5 ) + 5
scoreforq2df[i,7] <- (scoreforq2df[i,5] + scoreforq2df[i,6]) / 2
}
View(scoreforq2df)
max.x.q4 <- max(scoreforq4df$x)
min.x.q4 <- min(scoreforq4df$x)
max.y.q4 <- max(scoreforq4df$y)
min.y.q4 <- min(scoreforq4df$y)
max.x.q4 <- max(scoreforq4df$x)
min.x.q4 <- min(scoreforq4df$x)
max.y.q4 <- max(scoreforq4df$y)
min.y.q4 <- min(scoreforq4df$y)
h4 <- length(scoreforq4df[,1])
for (i in 1:h4) {
scoreforq4df[i,5] <<- (((scoreforq4df[i,3] - min.x.q4) / (max.x.q4 - min.x.q4)) * 2.5 ) + 0
scoreforq4df[i,6] <<- (((scoreforq4df[i,4] - min.y.q4) / (max.y.q4 - min.y.q4)) * 2.5 ) + 0
scoreforq4df[i,7] <<- (scoreforq4df[i,5] + scoreforq4df[i,6]) / 2
}
for (i in 1:h4) {
scoreforq4df[i,5] <- (((scoreforq4df[i,3] - min.x.q4) / (max.x.q4 - min.x.q4)) * 2.5 ) + 0
scoreforq4df[i,6] <- (((scoreforq4df[i,4] - min.y.q4) / (max.y.q4 - min.y.q4)) * 2.5 ) + 0
scoreforq4df[i,7] <- (scoreforq4df[i,5] + scoreforq4df[i,6]) / 2
}
names(scoreforq1df) <<- c("Name", "position1", "x", "y", "scorex", "scorey", "s1")
View(scoreforq4df)
scoreforq4df[1,5]
scoreforq4df[1,5] + 1
max.x.q4
min.x.q4
View(scoreforq3df)
max.x.q3 <- max(scoreforq3df$x)
min.x.q3 <- min(scoreforq3df$x)
max.y.q3 <- max(scoreforq3df$y)
min.y.q3 <- min(scoreforq3df$y)
h3 <- length(scoreforq3df[,1])
for (i in 1:h3) {
scoreforq3df[i,5] <- (((scoreforq3df[i,3] - min.x.q3) / (max.x.q3 - min.x.q3)) * 2.5 ) + 2.5
scoreforq3df[i,6] <- (((scoreforq3df[i,4] - min.y.q3) / (max.y.q3 - min.y.q3)) * 2.5 ) + 2.5
scoreforq3df[i,7] <- (scoreforq3df[i,5] + scoreforq3df[i,6]) / 2
}
View(scoreforq2df)
View(scoreforq3df)
runApp('shinyapps/dashboard')
scoreforq4df
scoreforq2df
scoreforq3df
scoreforq4df
shiny::runApp('shinyapps/dashboard')
insurancescore <- rbind(scoreforq1df,scoreforq2df,scoreforq3df,scoreforq4df)
insurancescore
insurancescore[is.na(insurancescore)]
is.na(insurancescore)
insurancescore[!is.na(insurancescore)]
z <- insurancescore[!is.na(insurancescore)]
View(z)
z <- insurancescore[complete.cases(insurancescore)]
z <- insurancescore[complete.cases(insurancescore),]
z
scoreforq1df
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
date()
d <- date()
d
sapply(d,class)
c <- sapply(strsplit(d,""))
c <- sapply(strsplit(d,""),function(x))
c <- sapply(strsplit(d,""),function(x)(as.character(x)))
c
View(c)
d
c <- sapply(strsplit(d,","),function(x)(as.character(x)))
c
d
c <- sapply(strsplit(d,","),function(x)(as.character(x)))
c <- sapply(strsplit(d,""),function(x)(as.character(x)))
c <- sapply(strsplit(d,"-"),function(x)(as.character(x)))
c <- sapply(strsplit(d,""),function(x)(as.character(x)))
c <- sapply(strsplit(d," "),function(x)(as.character(x)))
sapply
?sapply
todaydate <- date()
todaydate <- sapply(strsplit(todaydate," "),function(x)(as.character(x)))
date()
if (todaydate == "Jan") {
currentquarter <- 1
} else {
currentquarter <- 2
}
todaydate <- sapply(strsplit(todaydate," "),function(x)(as.character(x)))
today <- date()
today <- sapply(strsplit(todaydate," "),function(x)(as.character(x)))
today <- sapply(strsplit(today," "),function(x)(as.character(x)))
View(today)
todaymonth <- today[2,]
if (todaymonth == "Jan") {
currentquarter <- 1
} else {
currentquarter <- 2
}
?date()
install.packages("lubridate")
require(lubridate)
today <- date()
today <- date()
date()
month()
as.yearmon.default()
detach("package:lubridate", unload=TRUE)
sys.time
Sys.time
as.yearmon(Sys.time())
today <- as.yearmon(Sys.time)
as.yearmon(Sys.time())
today <- as.yearmon(Sys.time())
today
todaymonth <- format(x,"%B")
todaymonth <- format(today,"%B")
if (todaymonth == "January" || "February" || "March" || "April") {
currentquarter <- 1
} else  {
currentquarter <- 2
}
if (todaymonth == "January" | "February" | "March" | "April") {
currentquarter <- 1
} else  {
currentquarter <- 2
}
today <- as.yearmon(Sys.time())
if (todaymonth == "January" xor "February" xor "March" xor "April") {
currentquarter <- 1
} else  {
currentquarter <- 2
}
if (todaymonth == "January" xor "February" xor "March") {
currentquarter <- 1
} else if (todaymonth == "April" xor "May" xor "June")  {
currentquarter <- 2
} else if (todaymonth == "August" xor "September" xor "July") {
currentquarter <- 3
} (todaymonth == "October" xor "November" xor "December") {
currentquarter <- 4
}
if (todaymonth == "January" xor "February" xor "March") {
currentquarter <- 1
} else if (todaymonth == "April" xor "May" xor "June")  {
currentquarter <- 2
} else if (todaymonth == "August" xor "September" xor "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
if (todaymonth == "January" xor "February" xor "March") {
currentquarter <- 1
} else if (todaymonth == "April" xor "May" xor "June")  {
currentquarter <- 2
} else if (todaymonth == "August" xor "September" xor "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
if (todaymonth == "January" xor "February" xor "March") {
currentquarter <- 1
} else if (todaymonth == "April" xor "May" xor "June")  {
currentquarter <- 2
} else if (todaymonth == "August" xor "September" xor "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
today <- as.yearmon(Sys.time())
todaymonth <- format(today,"%B")
if (todaymonth == "January" xor "February" xor "March") {
currentquarter <- 1
} else if (todaymonth == "April" xor "May" xor "June")  {
currentquarter <- 2
} else if (todaymonth == "August" xor "September" xor "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
currentquarter
if (todaymonth == "January" | "February" | "March") {
currentquarter <- 1
} else if (todaymonth == "April" | "May" | "June")  {
currentquarter <- 2
} else if (todaymonth == "August" | "September" | "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
if (todaymonth == "January" || "February" || "March") {
currentquarter <- 1
} else if (todaymonth == "April" || "May" || "June")  {
currentquarter <- 2
} else if (todaymonth == "August" || "September" || "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
if (todaymonth == "January" | todaymonth == "February" | todaymonth == "March") {
currentquarter <- 1
} else if (todaymonth == "April" | todaymonth == "May" | todaymonth == "June")  {
currentquarter <- 2
} else if (todaymonth == "August" | todaymonth == "September" | todaymonth == "July") {
currentquarter <- 3
} else  {
currentquarter <- 4
}
runApp('shinyapps/dashboard')
today <- as.yearmon(Sys.time())
today
# function to read the quaters
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
remove(acereg)
remove(aigreg, americahomereg)
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
View(apacdf)
runApp('shinyapps/dashboard')
apacplot.qoq.sga
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
apacrevenuedf
runApp('shinyapps/dashboard')
apacrevenuedf
runApp('shinyapps/dashboard')
apacrevenuedf
which.max(apacrevenuedf$q1d)
runApp('shinyapps/dashboard')
apacrevenuedf
which.max(apacrevenuedf[,2])
runApp('shinyapps/dashboard')
maxapacrevenue <- apacrevenuedf$Name(which.max(apacrevenuedf[,currentquarter]))
maxapacrevenue <- apacrevenuedf$Name[which.max(apacrevenuedf[,currentquarter]),]
maxrevenue
which.max(apacrevenuedf[,currentquarter])
which.max(apacrevenuedf[,currentquarter])
which.max(apacrevenuedf[,1])
View(apacrevenuedf)
which.max(apacrevenuedf[,2])
which.max(apacrevenuedf[,3])
z <- 3
which.max(apacrevenuedf[,z])
apacrevenuedf$Name(4)
apacrevenuedf$Name[4]
runApp('shinyapps/dashboard')
maxapacrevenue
currentquarter
View(apacrevenuedf)
runApp('shinyapps/dashboard')
maxapacrevenue
currentquarter
maxapacrevenue <- apacrevenuedf$Name[which.max(apacrevenuedf[,currentquarter])+1]
maxapacrevenue
maxapacrevenue <- apacrevenuedf$Name[1+1]
maxapacrevenue
which.max(apacrevenuedf[,currentquarter])
which.max(apacrevenuedf[,currentquarter])
which.max(apacrevenuedf[,z])
which.max(apacrevenuedf[,1])
which.max(apacrevenuedf[,currentquarter+1])
which.max(apacrevenuedf[,currentquarter+])
which.max(apacrevenuedf[,currentquarter])
which.max(apacrevenuedf[,currentquarter])
runApp('shinyapps/dashboard')
maxapacrevenue
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
maxapacsga
apacsgadf
runApp('shinyapps/dashboard')
apacrevenuedf
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
maxaoacrevenue.color <- apacrevenuedf[,currentquarter+1]([which.max(apacrevenuedf[,currentquarter+1])])
maxaoacrevenue.color <- apacrevenuedf[,currentquarter+1]
maxaoacrevenue.color
View(maxaoacrevenue.color)
apacrevenuedf
apacrevenuedf[,3]
maxaoacrevenue.color <- maxaoacrevenue.color([which.max(apacrevenuedf[,currentquarter+1])])
maxaoacrevenue.color <- maxaoacrevenue.color(which.max(apacrevenuedf[,currentquarter+1]))
z <- maxaoacrevenue.color(2)
z <- maxaoacrevenue.color[2]
maxapacrevenue.color <- apacrevenuedf[,currentquarter+1]
maxapacrevenue.color
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1])]
maxaoacrevenue.color
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1]),]
maxapacrevenue.color <- maxapacrevenue.color[(which.max(apacrevenuedf[,currentquarter+1]))]
maxapacrevenue.color
maxapacrevenue.color <- apacrevenuedf[,currentquarter+1]
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1]),]
maxapacrevenue.color <- apacrevenuedf[,currentquarter+1]
maxaoacrevenue.color
maxaoacrevenue.color(1)
maxaoacrevenue.color[2]
maxaoacrevenue.color[3]
which.max(apacrevenuedf[,currentquarter+1])
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1])]
maxapacrevenue.color
runApp('shinyapps/dashboard')
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1]),]
maxapacrevenue.color <- apacrevenuedf[,currentquarter+1]
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1]),]
which.max(apacrevenuedf[,currentquarter+1])
maxapacrevenue.color <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1])]
maxaoacrevenue.color
maxapacrevenue.color <- apacrevenuedf[,currentquarter+1]
c <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1]),]
c
c
maxapacrevenue.color
which.max(apacrevenuedf[,currentquarter+1])
z <- maxapacrevenue.color[5]
z
z <- maxapacrevenue.color[which.max(apacrevenuedf[,currentquarter+1])]
z
runApp('shinyapps/dashboard')
apacrevenuedf
apacmargindf
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
revenueoverallfunction(apacdf)
apacrevenueplot <- outputplotrevenue
runApp('shinyapps/dashboard')
shiny::runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
runApp('shinyapps/google search bot')
runApp('shinyapps/dashboard')
shiny::runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
shiny::runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
search.term <- "cognizant ceo"
google.url <- getGoogleURL(search.term=search.term, quotes=FALSE)
source("googlefunctions.R")
search.term <- "cognizant ceo"
google.url <- getGoogleURL(search.term=search.term, quotes=FALSE)
source("googlefunctions.R")
jan09 <- getURL("https://stat.ethz.ch/pipermail/r-help/2009-January/date.html", ssl.verifypeer = FALSE)
jan09
jan09_parsed <- htmlTreeParse(jan09)
jan09_parsed
gsub(' ', '%20', "singapore president")
if(quotes) search.term <- paste('%22', search.term, '%22', sep='')
if(quotes = FALSE) search.term <- paste('%22', search.term, '%22', sep='')
paste('http://www.google', domain, '/search?q=',
"singapore%20president", sep='')
t <-paste('http://www.google', domain, '/search?q=',
"singapore%20president", sep='')
t <-paste('http://www.google', '.com.sg', '/search?q=',
"singapore%20president", sep='')
t
search.term <- "cognizant ceo"
google.url <- getGoogleURL(search.term=search.term, quotes=FALSE)
source("googlefunctions.R")
shiny::runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
runApp('shinyapps/dashboard')
library(devtools)
install("C:/Users/602891/Downloads/rPython")
shiny::runApp('shinyapps/2016-01-12-mini-ai-app-using-tensorflow-and-shiny-master')
setwd("C:/Users/602891/Desktop/r/shinyapps/2016-01-12-mini-ai-app-using-tensorflow-and-shiny-master")
system("python", "classify_image.py")
system("python", "classify_image.py")
template <- paste0("python"," ", "classify_image.py")
template
system(paste-(template))
system(paste0(template))
capture.output()
capture.output( system(paste0(template)))
z <- capture.output( system(paste0(template)))
z
z <- capture.output()
z
capture.output()
capture.output()
system(paste0(template))
capture.output()
capture.output()
print()
print(system(paste0(template)))
z <- print(system(paste0(template)))
print(system2(paste0(template)))
print(system2(paste0(template)))
string = "3523462---12413415---4577678---7967956---5456439"
pattern = "---"
args = c(string, pattern)
args
system2("python classify_image.py")
system2("python classify_image.py",stdout = T)
system(paste0(template), stdout=TRUE )
system(paste0(template," --image_file ","C:/Users/602891/Desktop/r/watson/image/a.jpg"))
system2(paste0(template," --image_file ","C:/Users/602891/Desktop/r/watson/image/a.jpg"))
capture.output(system(paste0(template," --image_file ","C:/Users/602891/Desktop/r/watson/image/a.jpg")))
x <- capture.output(system(paste0(template," --image_file ","C:/Users/602891/Desktop/r/watson/image/a.jpg")))
